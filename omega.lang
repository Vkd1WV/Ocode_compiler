<?xml version="1.0" encoding="UTF-8"?>

<language id="omega" _name="Omega" version="2.0" _section="Source">

	<metadata>
		<property name="mimetypes">text/x-c;text/x-csrc</property>
		<property name="globs">*.oc</property>
	</metadata>

	<styles>
		<style id="escape-char" _name="Escaped Character" map-to="def:special-char"/>
		<style id="char"     _name="Character" map-to="def:character"/>
		<style id="string"   _name="String"    map-to="def:string"/>
		<style id="number"   _name="Number"    map-to="def:constant"/>
		<style id="comment"  _name="Comment"   map-to="def:comment"/>
		<style id="comp_dir" _name="Compiler Directive" map-to="def:preprocessor"/>
		<style id="keyword"  _name="Keyword"      map-to="def:keyword"/>
		<style id="type"     _name="Instatiation" map-to="def:type"/>
		<style id="operator" _name="Operator"     map-to="def:operator"/>
		<style id="error"    _name="Error"        map-to="def:error"/>
		
		
		<style id="preprocessor"  _name="Preprocessor"  map-to="def:preprocessor"/>
		<style id="included-file" _name="Included File" map-to="def:string"/>
	</styles>

	<definitions>
		<define-regex id="preproc-start">^\s*#\s*</define-regex>
		<define-regex id="escaped-character" extended="true">
			\\(                   # leading backslash
			[\\\"\'nrbtfav\?] |   # escaped character
			[0-7]{1,3} |          # one, two, or three octal digits
			x[0-9A-Fa-f]+         # 'x' followed by hex digits
			)
		</define-regex>
		
<!--		Literals-->
		<context id="char" style-ref="char">
			<match>L?'(\%{escaped-character}|.)'</match>
		</context>
		
		<context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
			<start>L?"</start>
			<end>"</end>
			<include>
				<context id="escaped-character" style-ref="escape-char">
					<match>\%{escaped-character}</match>
				</context>
				<context ref="def:line-continue"/>
			</include>
		</context>
		
		<context id="hexadecimal" style-ref="number">
			<match extended="true">
				(?&lt;![\w\.])
				0[xX][a-fA-F0-9]+
				(?![\w\.])
			</match>
		</context>
		
		<context id="invalid-hexadecimal" style-ref="error">
			<match extended="true">
				(?&lt;![\w\.])
				0[xX][a-fA-F0-9]*[g-zG-Z][a-zA-Z0-9]*[uUlL]*
				(?![\w\.])
			</match>
		</context>
		
		<context id="decimal" style-ref="number">
			<match extended="true">
				(?&lt;![\w\.])
				(0|[1-9][0-9]*)
				(?![\w\.])
			</match>
		</context>
		
		<!--Comments-->
		<context id="linecomment" style-ref="comment">
			<start>//</start>
			<end>$</end>
		</context>
		
		<!--Compiler Directives-->
		
		<context id="include" style-ref="preprocessor">
      <match extended="true">
        \%{preproc-start}
        (include|import)\s*
        (".*?"|&lt;.*&gt;)
      </match>
      <include>
        <context id="included-file" sub-pattern="2" style-ref="included-file" class="path"/>
      </include>
    </context>

    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </start>
      <include>
        <context ref="def:line-continue" ignore-style="true"/>
        <context ref="string" ignore-style="true"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
      </include>
    </context>
		
		<context id="compiler_directive" style-ref="comp_dir">
			<keyword>#file</keyword>
			<keyword>#line</keyword>
			<keyword>#available</keyword>
			<keyword>#discardableResult</keyword>
			<keyword>#error</keyword>
			<keyword>#os</keyword>
			<keyword>#arch</keyword>
			<keyword>#omega</keyword>
		</context>
		
		<context id="keywords" style-ref="keyword">
			<keyword>label</keyword>
			<keyword>case</keyword>
			<keyword>default</keyword>
			<keyword>jump</keyword>
			<keyword>break</keyword>
			<keyword>continue</keyword>
			<keyword>return</keyword>
			<keyword>if</keyword>
			<keyword>else</keyword>
			<keyword>guard</keyword>
			<keyword>switch</keyword>
			<keyword>while</keyword>
			<keyword>do</keyword>
			<keyword>for</keyword>
			
			<keyword>typedef</keyword>
			<keyword>import</keyword>
			<keyword>req</keyword>
			<keyword>precedence</keyword>
			<keyword>fun</keyword>
			<keyword>postfix</keyword>
			<keyword>prefix</keyword>
			<keyword>infix</keyword>
			
			<keyword>enum</keyword>
			<keyword>union</keyword>
		</context>
		
		<context id="type-qualifiers" style-ref="type">
			<keyword>ro</keyword>
			<keyword>volatile</keyword>
			
			<keyword>static</keyword>
			<keyword>extern</keyword>
		</context>
		
		<context id="primative-types" style-ref="type">
			<keyword>none</keyword>
			<keyword>int</keyword>
			<keyword>long</keyword>
			<keyword>uint</keyword>
			<keyword>ulong</keyword>
		</context>
		
		<context id="word_operator" style-ref="operator">
			<keyword>as</keyword>
			<keyword>size</keyword>
		</context>
		
		<context id="operator" style-ref="operator">
			<match extended="true">
				( := | \. | , | \? | : | \( | \) | \[ | \] | { | } )
			</match>
		</context>
		
		
		<context id="omega" class="no-spell-check">
			<include>
				<context ref="char"/>
				<context ref="string"/>
				<context ref="hexadecimal"/>
				<context ref="invalid-hexadecimal"/>
				<context ref="decimal"/>
				
				<context ref="compiler_directive"/>
				<context ref="include"/>
        <context ref="preprocessor"/>
				<context ref="linecomment"/>
				
				<context ref="keywords"/>
				<context ref="operator"/>
				<context ref="word_operator"/>
				
				<context ref="primative-types"/>
				<context ref="type-qualifiers"/>
			</include>
		</context>
	
	</definitions>
</language>
